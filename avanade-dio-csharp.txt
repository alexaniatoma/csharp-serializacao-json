BOOTCAMP DIO AVANADE - TERMINO ATÉ 05/06/2024

TOPICOS

***IFTERNARIO


***TUPLAS
Fornece sintaxe concisa para agrupar vários elementos de dados em uma estrutura de dados leve. Pode conter tipos diferentes dentro da tupla o que traz uma grande vantagem.

(int, string, decimal) tupla = (1, "Alexania","Toma",1.65M);

Console.WriteLine($"Id: {tupla.Item1}");
Console.WriteLine($"Nome: {tupla.Item2}");
Console.WriteLine($"Sobrenome: {tupla.Item3}");
Console.WriteLine($"Altura: {tupla.Item4}");

--ver código no visual studio code o código em tuplas com método/ método LerArquivo.



***NUGETS
** GERENCIADOR DE PACOTES/PACKGES
É um conjunto de códigos úteis, que possibilita o compartilhamento e reuso do código / um pequeno projeto que resolve problemas e/ou faz integrações.
Para instalar no Visual Studio Code ->entra no site -> nuget.org -> escolhe o pacote -> clica no .NETCLI e copia o código -> abre o Visual e o terminal -> cole o código(apague/delete a versão) -> enter.
Para saber se instalou o pacote, entre no csjproj e veja se tem o pacote instalado.

Site do Nuget
nuget.org

Utilizamos o nuget: "Newtonsoft.Json"

 <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
  </ItemGroup>

(em Java é maven / em C# é nuget / em javaScript é npm)



***SERIALIZAÇÃO E DESERIALIZAÇÃO?
**O QUE É SERIALIZAÇÃO E DESERIALIZAÇÃO?
O processo de serializar consiste em transformar objetos em um fluxo de bytes para o seu armazenamento ou transmissão.

Ex.: Tenho um objeto e desejo que esse objeto seja transformado em um arquivo ou um banco de dados.
Ou seja,
Sua representação sai do meu programa e ele vai ser transformado em um arquivo e esse arquivo fica persistido em algum lugar, para que ele seja representado da mesma maneira.

***DESERIALIZAÇÃO
É o processo inverso da serialização.
Ex.: dados de uma pessoa em um arquivo e transforma-lo em código.

*** SERIALIZAÇÃO DE DADOS
**JSON
JavaScript Notation Object é um formato de texto que segue a sintaxe do JavaScript, muito usado para transmitir dados entre aplicações.
Formato/padroniza texto o que representa um objeto.
{
  "id":1,
  "Produto":"P1",
  "Preco":10.50
}

É utilizado é a padronização para troca de dados/comunicação entre linguagens diferentes, integração entre sistemas.

**Para serializar usaremos o nuget "Newtonsoft.Json"

--Na prática no Program C#
Não esqueça de colocar o caminho do pacote;
using Newtonsoft.Json;

using dioAvanade.Models;
using Newtonsoft.Json;

//instanciado a classe venda e foi criado o objeto v1

Venda v1 = new Venda(1, "Material de escritorio", 25.00M);

//string<nome da variavel> = JsonConvert.SerializeObject(<nome do objeto>);

string serializado1 = JsonConvert.SerializeObject(v1);

Console.WriteLine(serializado1);
//representa o objeto em Json

{"Id":1,"Produto":"Material de escritorio","Preco":25.00}

//Formatado utilizando Formatting.Indented
string serializado1 = JsonConvert.SerializeObject(v1, Formatting.Indented);

{
  "Id": 1,
  "Produto": "Material de escritorio",
  "Preco": 25.00
}

Tenho um codigo que foi serializado em Json que retorna um objeto serializado

***ESCREVENDO UM ARQUIVO JSON - File.WriteAllText("Arquivo/vendas.json" , serializado1);

//Na pasta Arquivo será criado um arquivo tipo Json (nome da classe vendas.json)

Venda v1 = new Venda(1, "Material de escritorio", 25.00M);

string serializado1 = JsonConvert.SerializeObject(v1, Formatting.Indented);

File.WriteAllText("Arquivo/vendas.json" , serializado1);

Console.WriteLine(serializado1);



*** SERIALIZANDO UMA COLEÇÃO/ LISTA
(muitos objetos - cenario/vida real)

List<Venda> listaVendas = new List<Venda>();

Venda v1 = new Venda(1, "Material de escritório", 25.00M);

Venda v2 = new Venda(2, "Licença de Software", 110.00M);

listaVendas.Add(v1);
listaVendas.Add(v2);

string serializado = JsonConvert.SerializeObject(listaVendas, Formatting.Indented);

File.WriteAllText("Arquivo/vendas.json" , serializado);


***JSON VIEW PARA VALIDAR O JSON
copiar e colar seu json neste site:

https://codebeautify.org/jsonviewer

Envie para o cliente o formato Minify, pois o arquivo terá menos bytes



***DATETIME
Colocar a data e a hora da venda:

Na classe

public class Venda
    {
       
       public Venda(int id, string produto, decimal preco, DateTime dataVenda)
       {
        Id = id;
        Produto = produto;
        Preco = preco;
        DataVenda = dataVenda;
        }
       
        public int Id { get; set; }
        public string Produto { get; set; }
        public decimal Preco { get; set; }

        public DateTime DataVenda { get; set; }

    }
}

No Program.cs

DateTime dataAtual = DateTime.Now;
List<Venda> listaVendas = new List<Venda>();

Venda v1 = new Venda(1, "Material de escritório", 25.00M, dataAtual);
Venda v2 = new Venda(2, "Licença de Software", 110.00M, dataAtual);

listaVendas.Add(v1);
listaVendas.Add(v2);

string serializado = JsonConvert.SerializeObject(listaVendas, Formatting.Indented);

File.WriteAllText("Arquivo/vendas.json" , serializado);

Console.WriteLine(serializado);

//ISO 8601 padroniza a representação de datas entre sistemas.


***DESERIALIZANDO UM OBJETO












